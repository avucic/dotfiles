[core]
	excludesfile = /Users/vucinjo/.gitignore
	autocrlf = input
	editor = emacsclient -a '' -c
	# editor = em
[user]
	name = Aleksandar Vucic
	email = vucinjo@gmail.com
[alias]
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  ld = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
  ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	l = !"git ld"
  s = status
  co = checkout
  br = branch
  gc='git commit'
  unstage = reset HEAD --
  ll = log --stat --abbrev-commit
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  aa = add --all
  bv = branch -vv
  ba = branch -ra
  bd = branch -d
  ca = commit --amend
  cane = commit --amend --no-edit
  cb = checkout -b
  cm = commit -a --amend -C HEAD
  ci = commit -a -v
  co = checkout
  di = diff
  mm = merge --no-ff
  st = status --short --branch
  tg = tag -a
  pu = push --tags
  un = reset --hard HEAD
  uh = reset --hard HEAD^
  unrm = "!COMMIT=$(git log -1 --pretty=%h -- \"$1\"); git checkout $COMMIT^ -- \"$1\"; echo \"File: $1, was restored from commit $COMMIT\"; git show -s $COMMIT"
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  exclude = !sh -c 'echo "$1" >> .git/info/exclude' -
  lb = !git branch -vv | cut -c 3- | awk '$3 !~/\\[/ { print $1 }'
  # orphan
  ob = !git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}'
	lob = "!git branch --format '%(refname:short) %(upstream:short)' | awk '{if (!$2) print $1;}'"
  fco = "!f() { git branch -a | grep -m1 -e ${1}.*${2} | sed \"s/remotes\\/origin\\///\" | xargs git checkout; }; f"
	fc = !git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git checkout
	mrb = !git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
	# generate branch name from: PP-999 Foo bar => PP-999-foo-bar
  cog = "!f(){ PREFIX=\"$(tr \"[:upper:]\" \"[:lower:]\" <<< $2)\"; echo \"$1-$PREFIX\" | tr ' ' '-' | xargs git checkout -b; }; f" 


[color]
	ui = true
[push]
	default = simple
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[fetch]
	prune = true
[merge]
	tool = fugitive
[mergetool]
	keepBackup = false
[mergetool "fugitive"]
	cmd = nvim -f -c \"Gdiff\" \"$MERGED\"
[rebase]
	autosquash = true

; [diff]
    ; tool = default-difftool
; [difftool "default-difftool"]
    ; cmd = code --wait --diff $LOCAL $REMOTE

[diff]
  tool = ediff
  guitool = ediff

[difftool "ediff"]
  cmd = ~/dotfiles/ediff.sh $LOCAL $REMOTE $MERGED

[merge]
  tool = ediff

[mergetool "ediff"]
  cmd = ~/dotfiles/ediff.sh $LOCAL $REMOTE $MERGED $BASE
  trustExitCode = true
