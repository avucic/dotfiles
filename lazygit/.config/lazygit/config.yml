os:
  editAtLine: 'nvim --server /tmp/nvim-server.pipe --remote-tab "$(pwd)/{{filename}}"'
gui:
  theme:
    activeBorderColor:
      - green
      - bold
    inactiveBorderColor:
      - "#848b98"
    # optionsTextColor:
    #   - blue
    selectedLineBgColor:
      - reverse
    selectedRangeBgColor:
      - reverse
      # - "#2B323D"
      # - default
    optionsTextColor:
      - magenta
    cherryPickedCommitBgColor:
      - cyan
    cherryPickedCommitFgColor:
      - blue
    unstagedChangesColor:
      - red
  commitLength:
    show: true
git:
  branchLogCmd: "git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium --oneline {{branchName}} --"
  paging:
    colorArg: always
    pager: delta --dark --paging=never
    # useConfig: use
  commit:
    signOff: false
  merging:
    # only applicable to unix users
    manualCommit: false
    # extra args passed to `git merge`, e.g. --no-ff
    args: ""
  log:
    # one of date-order, author-date-order, topo-order.
    # topo-order makes it easier to read the git log graph, but commits may not
    # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
    # order: "topo-order"
    # one of always, never, when-maximised
    # this determines whether the git graph is rendered in the commits panel
    # showGraph: "when-maximised"
    # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)
    showWholeGraph: false
  autoFetch: true
  autoRefresh: true
  allBranchesLogCmd: "git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium"
  overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
  disableForcePushing: false
  parseEmoji: false
  diffContextSize: 3
keybinding:
  universal:
    prevItem: "k" # go one line up
    nextItem: "j" # go one line down
    prevBlock: "p" # goto the previous block / panel
    nextBlock: "n" # goto the next block / panel
